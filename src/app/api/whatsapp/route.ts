import { NextResponse } from "next/server";

// Funci√≥n auxiliar para formatear el mensaje de WhatsApp
const formatWhatsAppMessage = (data: any): string => {
  if (!data) return "No hay datos disponibles";

  let message = "üõí *NUEVO PEDIDO EN JAMUCHE* üõí\n\n";

  // Informaci√≥n del cliente
  if (data.customer) {
    message += "*DATOS DEL CLIENTE:*\n";
    message += `üë§ Nombre: ${data.customer.name || "No disponible"}\n`;
    message += `üì± Tel√©fono: ${data.customer.phone || "No disponible"}\n`;
    message += `üìß Email: ${data.customer.email || "No disponible"}\n`;
    message += `üè† Direcci√≥n: ${data.customer.address || "No disponible"}\n\n`;
  }

  // Informaci√≥n de los productos
  if (data.items && data.items.length > 0) {
    message += "*PRODUCTOS:*\n";

    data.items.forEach((item: any, index: number) => {
      message += `${index + 1}. ${item.name || "Producto"} - ${
        item.quantity || 1
      } √ó ${item.price || 0}‚Ç¨ = ${(item.quantity || 1) * (item.price || 0)}‚Ç¨\n`;
    });

    message += "\n";
  }

  // Informaci√≥n del total
  if (data.order) {
    message += "*RESUMEN DEL PEDIDO:*\n";
    message += `üí∞ Subtotal: ${data.order.subtotal || 0}‚Ç¨\n`;

    if (data.order.shipping) {
      message += `üöö Env√≠o: ${data.order.shipping}‚Ç¨\n`;
    }

    if (data.order.discount) {
      message += `üè∑Ô∏è Descuento: -${data.order.discount}‚Ç¨\n`;
    }

    message += `üíµ *TOTAL: ${data.order.total || 0}‚Ç¨*\n\n`;
  }

  // M√©todo de pago y env√≠o
  if (data.order) {
    message += "*DETALLES ADICIONALES:*\n";
    message += `üí≥ M√©todo de pago: ${
      data.order.paymentMethod || "No especificado"
    }\n`;
    message += `üì¶ M√©todo de env√≠o: ${
      data.order.shippingMethod || "No especificado"
    }\n`;

    if (data.order.notes) {
      message += `üìù Notas: ${data.order.notes}\n`;
    }
  }

  message += "\nüôè Gracias por su compra en Jamuche üôè";

  return message;
};

// Validar la estructura de los datos
const validateOrderData = (data: any): string | null => {
  if (!data) {
    return "No se proporcionaron datos";
  }

  // Validar informaci√≥n del cliente
  if (!data.customer) {
    return "Falta la informaci√≥n del cliente";
  }

  // Validar productos
  if (!data.items || !Array.isArray(data.items) || data.items.length === 0) {
    return "No hay productos en el pedido";
  }

  // Validar informaci√≥n del pedido
  if (!data.order) {
    return "Falta la informaci√≥n del pedido";
  }

  return null; // Datos v√°lidos
};

export async function GET() {
  return NextResponse.json({
    message: "API de WhatsApp funcionando correctamente",
    info: "Utiliza el m√©todo POST para enviar datos de pedido y obtener un enlace de WhatsApp",
    example: {
      customer: {
        name: "Nombre del Cliente",
        email: "cliente@ejemplo.com",
        phone: "612345678",
        address: "Direcci√≥n del cliente",
      },
      items: [
        { id: "1", name: "Producto 1", price: 19.99, quantity: 2 },
        { id: "2", name: "Producto 2", price: 12.5, quantity: 1 },
      ],
      order: {
        subtotal: 52.48,
        shipping: 5,
        discount: 0,
        total: 57.48,
        paymentMethod: "Transferencia bancaria",
        shippingMethod: "Est√°ndar",
      },
    },
  });
}

export async function POST(request: Request) {
  try {
    const data = await request.json();

    // Validaci√≥n de datos
    const validationError = validateOrderData(data);
    if (validationError) {
      return NextResponse.json(
        {
          error: validationError,
          success: false,
        },
        { status: 400 }
      );
    }

    // Formatear el mensaje para WhatsApp
    const formattedMessage = formatWhatsAppMessage(data);

    // N√∫mero de tel√©fono del negocio (debe incluir el c√≥digo de pa√≠s)
    const phoneNumber = process.env.WHATSAPP_BUSINESS_PHONE || "+573058348929";

    // Crear el enlace de WhatsApp
    const whatsappLink = `https://api.whatsapp.com/send?phone=${phoneNumber}&text=${encodeURIComponent(
      formattedMessage
    )}`;

    return NextResponse.json({
      success: true,
      whatsappLink,
      message: formattedMessage,
    });
  } catch (error) {
    console.error("Error al procesar la solicitud de WhatsApp:", error);

    return NextResponse.json(
      {
        error: "Error al procesar la solicitud",
        success: false,
      },
      { status: 500 }
    );
  }
}
